syntax = "proto3";
package raft_serverpb;

import "eraftpb.proto";
import "metapb.proto";

message RaftMessage {
  uint64 region_id = 1;
  metapb.Peer from_peer = 2;
  metapb.Peer to_peer = 3;
  eraftpb.Message message = 4;
//  metapb.RegionEpoch region_epoch = 5;
  // true means to_peer is a tombstone peer and it should remove itself.
//  bool is_tombstone = 6;
  // Region key range [start_key, end_key).
//  bytes start_key = 7;
//  bytes end_key = 8;
  // If it has value, to_peer should be removed if merge is never going to complete.
//  metapb.Region merge_target = 9;
//  ExtraMessage extra_msg = 10;
//  bytes extra_ctx = 11;
}

message Done {}

message RaftTruncatedState {
  uint64 index = 1;
  uint64 term = 2;
}

message StoreIdent {
  uint64 cluster_id = 1;
  uint64 store_id = 2;
}

message RaftLocalState {
  eraftpb.HardState hard_state = 1;
  uint64 last_index = 2;
}

message RaftApplyState {
  uint64 applied_index = 1;
  uint64 last_commit_index = 3;
  uint64 commit_index = 4;
  uint64 commit_term = 5;
  RaftTruncatedState truncated_state = 2;
}

//enum PeerState {
//  Normal = 0;
//  Applying = 1;
//  Tombstone = 2;
//  Merging = 3;
//}
//
//message MergeState {
//  uint64 min_index = 1;
//  metapb.Region target = 2;
//  uint64 commit = 3;
//}

message RegionLocalState {
//  PeerState state = 1;
  metapb.Region region = 2;
//  MergeState merge_state = 3;
}