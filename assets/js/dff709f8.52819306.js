"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2689],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||c;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<c;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7067:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const c={sidebar_position:1},o="Batch Account Balance",i={unversionedId:"API Doc/Query APIs/BatchAccountBalance",id:"API Doc/Query APIs/BatchAccountBalance",title:"Batch Account Balance",description:"BatchAccountBalance(seq_num Vec)",source:"@site/docs/API Doc/Query APIs/BatchAccountBalance.md",sourceDirName:"API Doc/Query APIs",slug:"/API Doc/Query APIs/BatchAccountBalance",permalink:"/Auticuro/docs/API Doc/Query APIs/BatchAccountBalance",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Account Balance",permalink:"/Auticuro/docs/API Doc/Query APIs/AccountBalance"},next:{title:"Hierarchy Account Balance",permalink:"/Auticuro/docs/API Doc/Query APIs/HierarchyAccountBalance"}},s={},u=[{value:"Description",id:"description",level:3},{value:"Definitions",id:"definitions",level:3}],l={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"batch-account-balance"},"Batch Account Balance"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"BatchAccountBalance(seq_num: u64, account_ids: Vec<String>)"))),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BatchAccountBalance")," is a batch API for ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountBalance")," that takes a list of account ids and returns their balances.\nFor this batch API, a non-zero ",(0,a.kt)("em",{parentName:"p"},"seq_num")," must be specified to return a snapshot view of all accounts at the same ",(0,a.kt)("em",{parentName:"p"},"seq_num"),"."),(0,a.kt)("p",null,"In case of the input account ids are partially found in the system, the unavailable accounts are specified in response. "),(0,a.kt)("h3",{id:"definitions"},"Definitions"),(0,a.kt)("p",null,"Batch account balance response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf3"},"message BatchAccountBalanceResponse {\n  option Error error = 1;\n  uint64 seq_num = 2;\n  map<string, Balance> balances = 3;\n  repeated String unavailable_accounts = 4;\n}\n\nmessage Balance {\n  string available = 1;\n  map<string, string> reservations = 2; // reservation_id -> reservation amount\n  map<string, string> pending_in = 3;   // txn_id -> amount\n  map<string, string> pending_out = 4;\n\n}\n")))}m.isMDXComponent=!0}}]);