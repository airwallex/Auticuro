"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[188],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(f,c(c({ref:n},s),{},{components:t})):a.createElement(f,c({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=t[p];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2},c="BatchBalanceOperation",i={unversionedId:"API Doc/Balance Operation APIs/BatchBalanceOperation",id:"API Doc/Balance Operation APIs/BatchBalanceOperation",title:"BatchBalanceOperation",description:"Increase/decrease the balance of multiple accounts in a single request. Checks are performed",source:"@site/docs/API Doc/Balance Operation APIs/BatchBalanceOperation.md",sourceDirName:"API Doc/Balance Operation APIs",slug:"/API Doc/Balance Operation APIs/BatchBalanceOperation",permalink:"/Auticuro/docs/API Doc/Balance Operation APIs/BatchBalanceOperation",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Transfer",permalink:"/Auticuro/docs/API Doc/Balance Operation APIs/Transfer"},next:{title:"Reserve",permalink:"/Auticuro/docs/API Doc/Balance Operation APIs/Reserve"}},l={},p=[{value:"Usage Scenario",id:"usage-scenario",level:3}],s={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"batchbalanceoperation"},"BatchBalanceOperation"),(0,r.kt)("p",null,"Increase/decrease the balance of multiple accounts in a single request. Checks are performed\nfor each account:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The account is in ",(0,r.kt)("inlineCode",{parentName:"li"},"Normal")," state"),(0,r.kt)("li",{parentName:"ul"},"The account balance after the request handling is within the ",(0,r.kt)("em",{parentName:"li"},"[lower limit, upper limit]")),(0,r.kt)("li",{parentName:"ul"},"The account currency is the same as the currency in the request")),(0,r.kt)("h3",{id:"usage-scenario"},"Usage Scenario"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Basic Usage:\nA list of unilateral money increasing/decreasing operations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Advanced Usage:\nSet the ",(0,r.kt)("inlineCode",{parentName:"p"},"Precondition preconditions")," to implement an optimistic lock. All the ",(0,r.kt)("em",{parentName:"p"},"preconditions"),"\nwill be checked before the request handling. If any of the preconditions fails, the request will\nfail.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"BalanceCheck")," precondition is provided to check: the balance of an account == ",(0,r.kt)("em",{parentName:"p"},"expected_balance")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"message BatchBalanceOperationRequest {\n  string dedup_id = 1;\n  repeated BalanceOperationSpec balance_operation_specs = 2;\n  string context = 3;\n  repeated Precondition preconditions = 4; // Optional\n\n  // Provide flexible support for balance operations happened among more than 2 accounts\n  message BalanceOperationSpec {\n    string account_id = 1;\n    string amount = 2;\n    string currency = 3;\n    string metadata = 4;\n  }\n}\n\nmessage Precondition {\n  oneof precondition {\n    BalanceCheck balance_check = 1;\n  }\n\n  message BalanceCheck {\n    string account_id = 1;\n    string expected_balance = 2;\n  }\n}\n\nmessage BatchBalanceOperationResponse {\n  errorpb.Error error = 1;\n  commonpb.ResponseHeader header = 2;\n  BatchBalanceOperationRequest request = 3;\n  repeated accountpb.AccountChange account_changes = 4;\n}\n")))}d.isMDXComponent=!0}}]);