"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5816],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3704:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},i="TCC",c={unversionedId:"API Doc/Transactional APIs/TCC",id:"API Doc/Transactional APIs/TCC",title:"TCC",description:"Try, Commit, and Cancel (TCC) is a model of compensating transactions. This model requires each service",source:"@site/docs/API Doc/Transactional APIs/TCC.md",sourceDirName:"API Doc/Transactional APIs",slug:"/API Doc/Transactional APIs/TCC",permalink:"/Auticuro/docs/API Doc/Transactional APIs/TCC",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Saga",permalink:"/Auticuro/docs/API Doc/Transactional APIs/Saga"},next:{title:"Query APIs",permalink:"/Auticuro/docs/category/query-apis"}},s={},l=[{value:"Tcc interfaces",id:"tcc-interfaces",level:3},{value:"Try",id:"try",level:3},{value:"Confirm",id:"confirm",level:3},{value:"Cancel",id:"cancel",level:3}],p={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tcc"},"TCC"),(0,a.kt)("p",null,"Try, Commit, and Cancel (TCC) is a model of compensating transactions. This model requires each service\nof an application to provide three interfaces, that is, the try, commit, and cancel interfaces.\nThe core idea of this model is to release the locking of resources at the quickest possible time by\nreserving the resources (providing intermediate states). If the transaction can be committed, the\nreserved resources are confirmed. If the transaction needs to be rolled back, the reserved resources are released."),(0,a.kt)("p",null,"The TCC can be divided into 3 parts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Try: attempts to execute, completes all business checks (consistency), reserves necessary\nbusiness resources(for quasi-isolation)"),(0,a.kt)("li",{parentName:"ul"},"Confirm: if all branches succeed in the Try phase, then we move to the Confirm phase,\nwhere Confirm actually executes the business without any business checks, using only the business "),(0,a.kt)("li",{parentName:"ul"},"Resources reserved in the Try phase"),(0,a.kt)("li",{parentName:"ul"},"Cancel: If one of the Trys in all branches fails, we go to the Cancel phase, which\nreleases the business resources reserved in the Try phase")),(0,a.kt)("h3",{id:"tcc-interfaces"},"Tcc interfaces"),(0,a.kt)("p",null,"Currently the ",(0,a.kt)("inlineCode",{parentName:"p"},"BatchBalanceOperation")," interface is supported in TCC mode. TCC Transactions among\nmultiple Auticuro shards can be achieved by using this ",(0,a.kt)("inlineCode",{parentName:"p"},"BatchBalanceOperation"),"(TCC version)\ninterface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"  rpc TccTry(TccTryRequest) returns (TccTryResponse) {}\n  rpc TccConfirm(TccConfirmRequest) returns (TccConfirmResponse) {}\n  rpc TccCancel(TccCancelRequest) returns (TccCancelResponse) {}\n")),(0,a.kt)("h3",{id:"try"},"Try"),(0,a.kt)("p",null,"For each account in the ",(0,a.kt)("inlineCode",{parentName:"p"},"batch_balance_operation"),", checks include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The account is in ",(0,a.kt)("inlineCode",{parentName:"li"},"Normal")," state"),(0,a.kt)("li",{parentName:"ul"},"The account balance after the request handling is within the ",(0,a.kt)("em",{parentName:"li"},"[lower limit, upper limit]"))),(0,a.kt)("p",null,"If all pre-checks pass:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For money increasing operations, add an entry: ",(0,a.kt)("em",{parentName:"li"},"txn_id -> amount")," in the ",(0,a.kt)("em",{parentName:"li"},"pending_in")," map of the account"),(0,a.kt)("li",{parentName:"ul"},"For money decreasing operations, moving the amount of money from ",(0,a.kt)("em",{parentName:"li"},"avaliable")," to an entry\n",(0,a.kt)("em",{parentName:"li"},"txn_id -> amount")," in\nthe\n",(0,a.kt)("em",{parentName:"li"},"pending_out")," map of the account")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message TccTryRequest {\n  string txn_id = 1;\n  oneof request {\n      TccTryBatchBalanceOperationRequest batch_balance_operation = 2;\n  }\n  string metadata = 3;\n}\n\nmessage TccTryResponse {\n  TccTryRequest request = 1;\n  commonpb.ResponseHeader header = 2;\n  errorpb.Error error = 3;\n\n  oneof response {\n    TccTryBatchBalanceOperationResponse batch_balance_operation = 4;\n  }\n}\n")),(0,a.kt)("h3",{id:"confirm"},"Confirm"),(0,a.kt)("p",null,"Request handling:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Search the entry by ",(0,a.kt)("em",{parentName:"li"},"txn_id")," in the ",(0,a.kt)("em",{parentName:"li"},"pending_out")," or ",(0,a.kt)("em",{parentName:"li"},"pending_in")," map of the account"),(0,a.kt)("li",{parentName:"ul"},"If the entry is found in ",(0,a.kt)("em",{parentName:"li"},"pending_out"),", remove the entry"),(0,a.kt)("li",{parentName:"ul"},"If the entry is found in ",(0,a.kt)("em",{parentName:"li"},"pending_in"),", move the ",(0,a.kt)("inlineCode",{parentName:"li"},"amount")," from the entry to ",(0,a.kt)("em",{parentName:"li"},"available"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message TccConfirmRequest {\n  string txn_id = 1;\n  string dedup_id = 2;\n  string metadata = 3;\n}\n\nmessage TccConfirmResponse {\n  TccConfirmRequest request = 1;\n  commonpb.ResponseHeader header = 2;\n  errorpb.Error error = 3;\n\n  oneof response {\n    TccConfirmBatchBalanceOperationResponse batch_balance_operation = 4;\n  }\n}\n")),(0,a.kt)("h3",{id:"cancel"},"Cancel"),(0,a.kt)("p",null,"Request handling:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Search the entry by ",(0,a.kt)("em",{parentName:"li"},"txn_id")," in the ",(0,a.kt)("em",{parentName:"li"},"pending_out")," or ",(0,a.kt)("em",{parentName:"li"},"pending_in")," map of the account"),(0,a.kt)("li",{parentName:"ul"},"If the entry is found in ",(0,a.kt)("em",{parentName:"li"},"pending_out"),", move the ",(0,a.kt)("inlineCode",{parentName:"li"},"amount")," from the found entry to ",(0,a.kt)("em",{parentName:"li"},"available")),(0,a.kt)("li",{parentName:"ul"},"If the entry is found in ",(0,a.kt)("em",{parentName:"li"},"pending_in"),", remove the entry")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message TccCancelRequest {\n  string txn_id = 1;\n  string dedup_id = 2;\n  string metadata = 3;\n}\n\nmessage TccCancelResponse {\n  TccCancelRequest request = 1;\n  commonpb.ResponseHeader header = 2;\n  errorpb.Error error = 3;\n\n  oneof response {\n    TccCancelBatchBalanceOperationResponse batch_balance_operation = 4;\n  }\n}\n")))}m.isMDXComponent=!0}}]);