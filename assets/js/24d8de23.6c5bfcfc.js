"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1383:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},o="Command Side",s={unversionedId:"Design/Command Side",id:"Design/Command Side",title:"Command Side",description:"Auticuro leverages a CQRS with Event Sourcing architecture, in which the command side is",source:"@site/docs/Design/Command Side.md",sourceDirName:"Design",slug:"/Design/Command Side",permalink:"/Auticuro/docs/Design/Command Side",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/Auticuro/docs/Design/Architecture Overview"},next:{title:"Query Side",permalink:"/Auticuro/docs/Design/QuerySide"}},l={},c=[],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"command-side"},"Command Side"),(0,a.kt)("p",null,"Auticuro leverages a CQRS with Event Sourcing architecture, in which the command side is\nwrite-intensive and serves as the source of truth for the system. To ensure high throughput and\nsafety, Auticuro incorporates a Raft-based cluster that uses an LMAX-like architecture. The\nfollowing sections will illustrate the intricacies of Auticuro command-side's implementation."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image info",src:n(7479).Z,width:"940",height:"841"})),(0,a.kt)("p",null,"The above figure shows how a TransferRequest is handled inside the leader of one Auticuro shard,\nsupporting real-time balance checks in the critical path:"),(0,a.kt)("p",null,"The TransferRequest is persisted into the raft log unconditionally, even if it is a duplicated one.\nIn real life, one raft log entry may consist of a batch of transfer requests to amortize the time\ncost of permanently writing the data to disk, done by the system call fsync of Linux/Unix."),(0,a.kt)("p",null,"The event log stores the balance change event generated by the transfer request. Each event is\nassigned a consecutive integer starting from 1, used by downstream systems to verify the integrity\nof the event stream. A duplicated transfer request in the raft log will be detected by DedupId Store\nand discarded, leaving the BalanceMap unchanged and no event generated."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Thread 1: The Foreground gRPC Thread")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1"),". The gRPC thread accepts a TransferRequest, appends it to the raft log, waits for that\nrequest to be committed, and receives the corresponding raft log_index (This implies that the log\nentry has been persisted on the majority nodes and is ready to be applied)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2"),". The gRPC thread registers the TransferRequest into the MessageBroker with that\nlog_index and waits for the TransferResponse from the MessageBroker and replies that response to the client.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Thread 2: Single-Threaded Log Consumer")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1"),". The LogConsumer polls that committed log entry from the raft log and deserializes the\nlog entry to the TransferRequest."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2"),". The LogConsumer sends the TransferRequest to the WalletStateMachine via the Single\nProducer Single Consumer (SPSC) channel.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Thread 3: Single-Threaded Lockless Critical Path")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 1"),". The WalletStateMachine receives the TransferRequest from the SPSC channel,\nde-duplicates via DedupId Store, updates the BalanceMap, generates the TransferResponse and\nBalanceChangeEvent, and persists both BalanceChangeEvent and dedupId into RocksDB."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Step 2"),". The WalletStateMachine registers the TransferResponse into the MessageBroker with that log_index.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Thread 4: Single-Threaded Message Broker")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Match"),". The MessageBroker is an infinite loop matching the TransferRequest from the gRPC thread\nand the TransferResponse from the WalletStateMachine via the log_index.")))}p.isMDXComponent=!0},7479:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/firm-wallet-c-side-0995d4fadf5fb9135f833182d886e635.svg"}}]);