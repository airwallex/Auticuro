"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8676],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5271:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},o="Architecture",c={unversionedId:"Design/Architecture Overview",id:"Design/Architecture Overview",title:"Architecture",description:"image info",source:"@site/docs/Design/Architecture Overview.md",sourceDirName:"Design",slug:"/Design/Architecture Overview",permalink:"/Auticuro/docs/Design/Architecture Overview",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Design Decisions",permalink:"/Auticuro/docs/Design/Design Decisions"},next:{title:"Command Side",permalink:"/Auticuro/docs/Design/Command Side"}},s={},u=[{value:"Command Side",id:"command-side",level:2},{value:"Query Side",id:"query-side",level:2}],l={toc:u},d="wrapper";function p(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,r.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"image info",src:n(840).Z,width:"1020",height:"601"}),"\nAbove is the high-level architecture of one Auticuro shard, which uses CQRS with Event Sourcing."),(0,a.kt)("h2",{id:"command-side"},"Command Side"),(0,a.kt)("p",null,"The command side of the Auticuro shard is written in Rust to achieve high performance and correctness\nand uses Raft to achieve dependability under cloud environments. It processes requests for account\nmanagement and balance operation, supports real-time balance checks in critical-path, and generates\nevent logs streamed to the query side in a real-time manner."),(0,a.kt)("p",null,"Auticuro leverages its single-threaded critical path and Copy-On-Write pattern to achieve all-or-nothing\nsemantics for a batch of operations. If any of the operations in a batch fails due to balance limitation\nchecks or improper account state, the preceding changes made by that batch on cloned accounts are discarded,\nleaving the state unchanged."),(0,a.kt)("h2",{id:"query-side"},"Query Side"),(0,a.kt)("p",null,"The query side provides materialized views of the accounts by replaying event logs tailored to flexible\nbusiness requirements to maximize the query performance. These views are read-only caches of the events,\nwhile the event store is the golden source of truth. It is essential that the command side generates events\nwith a consecutive sequence number, which can be used by query sides to perform integrity checks and\ndetect missing or out-of-order events. When the query side system is damaged, its state can be\nrestored by replaying all past account/balance change events, and snapshots are used to accelerate\nthe process. Typical query side services are as follows:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Account Hierarchy Service")),(0,a.kt)("p",null,"Our client could set up multiple accounts for a specific business requirement and organize them as\na tree-style hierarchy. Leaf accounts support modifications such as account management and balance\noperations, while non-leaf accounts are unmodifiable and illustrate an aggregated read-only view."),(0,a.kt)("p",null,"An Account Hierarchy Service is built to satisfy the above requirement:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Account Hierarchy Service applies events and calculates leaf accounts' balance "),(0,a.kt)("li",{parentName:"ul"},"Users could CRUD account hierarchy configs via the UI, where CRUD is the acronym for CREATE, READ,\nUPDATE, and DELETE. "),(0,a.kt)("li",{parentName:"ul"},"When receiving a query request, the Account Hierarchy Service reads the account hierarchy config\nfrom the database and calculates the non-leaf account's balance by aggregating the balance of\nits children recursively.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Account Query Service")),(0,a.kt)("p",null,"The Account Query Service provides the Read-Your-Write consistency query for account balances and\nbalance change history.  After you've updated the account, it is very natural that if you immediately\nread it back, you should read your last modification. This is called read-your-write consistency.\nIt is desirable because it provides a more intuitive experience for users and can help ensure correct\napplication behavior."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The Account Query Service applies events to build every version for every account."),(0,a.kt)("li",{parentName:"ul"},"Each account instance contains a version number, facilitating account-wise pagination queries\nfor change history."),(0,a.kt)("li",{parentName:"ul"},"The versioned accounts are replicated to a data warehouse like BigQuery(an enterprise data\nwarehouse product of Google) for OLAP analysis.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kafka Connector")),(0,a.kt)("p",null,"The events are published to Kafka for downstream systems to subscribe from."))}p.isMDXComponent=!0},840:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/CQRS_with_event_sourcing-0a33ba2e56411590867cae3556b9edf7.svg"}}]);