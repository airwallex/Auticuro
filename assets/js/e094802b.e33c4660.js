"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8633],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var l=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},a=Object.keys(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=l.createContext({}),i=function(t){var e=l.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},d=function(t){var e=i(t.components);return l.createElement(s.Provider,{value:e},t.children)},c="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},p=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=i(n),p=r,m=c["".concat(s,".").concat(p)]||c[p]||k[p]||a;return n?l.createElement(m,u(u({ref:e},d),{},{components:n})):l.createElement(m,u({ref:e},d))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,u=new Array(a);u[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[c]="string"==typeof t?t:r,u[1]=o;for(var i=2;i<a;i++)u[i]=n[i];return l.createElement.apply(null,u)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5374:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>u,default:()=>k,frontMatter:()=>a,metadata:()=>o,toc:()=>i});var l=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},u="Test Scenarios",o={unversionedId:"Evaluation/Chaos Test/Fault Tolerance",id:"Evaluation/Chaos Test/Fault Tolerance",title:"Test Scenarios",description:"Test Scenarios",source:"@site/docs/Evaluation/Chaos Test/Fault Tolerance.md",sourceDirName:"Evaluation/Chaos Test",slug:"/Evaluation/Chaos Test/Fault Tolerance",permalink:"/Auticuro/docs/Evaluation/Chaos Test/Fault Tolerance",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Chaos Test",permalink:"/Auticuro/docs/category/chaos-test"},next:{title:"Release Notes",permalink:"/Auticuro/docs/ReleaseNotes"}},s={},i=[{value:"Test Scenarios",id:"test-scenarios-1",level:2},{value:"Transfer",id:"transfer",level:3},{value:"BatchBalanceOperation",id:"batchbalanceoperation",level:3},{value:"Reserve/Release",id:"reserverelease",level:3},{value:"TCCTry/Confirm/Cancel",id:"tcctryconfirmcancel",level:3}],d={toc:i},c="wrapper";function k(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,l.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"test-scenarios"},"Test Scenarios"),(0,r.kt)("h2",{id:"test-scenarios-1"},"Test Scenarios"),(0,r.kt)("h3",{id:"transfer"},"Transfer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The Scenario"),":")),(0,r.kt)("p",null,"Given accounts A and B, whose initial balance is 0, transfer money between A and B for N times, the\ntotal amount of the N transfer is 0(see E1 below), thus accounts A and B\u2019s balance should be 0 after\nprocessing the Nth transfer request. (N = 10000 for test implementation)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Example")," (N = 3 for illustration):")),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"A -> B"),(0,r.kt)("td",null,"10")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"B -> A"),(0,r.kt)("td",null,"30")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"A -> B"),(0,r.kt)("td",null,"20"))),(0,r.kt)("p",null,"Balance of A and B should stay unchanged:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A:  (-10) + 30 + (-20) = 0\n\nB:  10 + (-30) + 20 = 0\n")),(0,r.kt)("h3",{id:"batchbalanceoperation"},"BatchBalanceOperation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The Scenario"),":"),(0,r.kt)("p",{parentName:"li"},"  Given accounts A, B, and C, make ",(0,r.kt)("strong",{parentName:"p"},"N("),"N=10000 for testing",(0,r.kt)("strong",{parentName:"p"},")"),"  BatchBalanceOperation(BBO)\nrequests involving accounts A, B, and C. After all the requests have been handled, the balance\nof A, B, and C should stay unchanged if the below requirements are satisfied:")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example")," (N = 4):"))),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null),(0,r.kt)("td",null,"A"),(0,r.kt)("td",null,"B"),(0,r.kt)("td",null,"C")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"BBO1"),(0,r.kt)("td",null,"1"),(0,r.kt)("td",null,"7"),(0,r.kt)("td",null,"-3")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"BBO2"),(0,r.kt)("td",null,"9"),(0,r.kt)("td",null,"8"),(0,r.kt)("td",null,"8")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"BBO3"),(0,r.kt)("td",null,"-7"),(0,r.kt)("td",null,"-10"),(0,r.kt)("td",null,"-1")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"BBO4"),(0,r.kt)("td",null,"-3"),(0,r.kt)("td",null,"-5"),(0,r.kt)("td",null,"-4"))),(0,r.kt)("p",null,"Balance of A, B, and C should stay unchanged:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    A: 1 + 9 + (-7) + (-3) == 0\n    B: 7 + 8 + (-10) + (-5) == 0\n    C: (-3) + (8) + (-1) + (-4) == 0\n")),(0,r.kt)("h3",{id:"reserverelease"},"Reserve/Release"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The Scenario:")),(0,r.kt)("p",{parentName:"li"},"  Given an account A, make N(N=100 for testing) reservations and N full releases. After all the\nrequests have been handled, the balance of account A should remain unchanged, and there should be\nno ongoing reservations. A release request must be put after its corresponding reserve request,\nbut it is not required to be adjacent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example(N=3):")),(0,r.kt)("p",{parentName:"li"},"In this case, after step 4, there should be two reservation entries (id_1 -> 100, id_3 -> 300).\nWhen all the requests have been handled, there should be no ongoing reservations, and the balance\nof account A should stay unchanged."))),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null),(0,r.kt)("td",null,"Reservation_id"),(0,r.kt)("td",null,"Amount")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Reserve"),(0,r.kt)("td",null,"id_1"),(0,r.kt)("td",null,"100")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Reserve"),(0,r.kt)("td",null,"id_2"),(0,r.kt)("td",null,"200")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Release"),(0,r.kt)("td",null,"id_2"),(0,r.kt)("td",null,"200")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Reserve"),(0,r.kt)("td",null,"id_3"),(0,r.kt)("td",null,"300")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Release"),(0,r.kt)("td",null,"id_1"),(0,r.kt)("td",null,"100")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Release"),(0,r.kt)("td",null,"id_3"),(0,r.kt)("td",null,"300"))),(0,r.kt)("h3",{id:"tcctryconfirmcancel"},"TCCTry/Confirm/Cancel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The Scenario(Try+Confirm)")),(0,r.kt)("p",{parentName:"li"},"  Given accounts A, B, and C, make N TccTry and N TccConfirm requests against A, B, and C.\nA TccConfirm request must be after its corresponding TccTry request, but it is not required to be adjacent."))),(0,r.kt)("p",null,"Prerequisites: for accounts A, B, and C, the total amount in Try requests should be equal to 0 as below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example(N=3)")),(0,r.kt)("p",{parentName:"li"},"There might be ongoing transactions before the N (Try+ Confirm) pairs be handled, while\nafter all requests have been handled, the balance of A, B, and C should stage ",(0,r.kt)("strong",{parentName:"p"},"unchanged"),"."),(0,r.kt)("p",{parentName:"li"},"Balance change of accounts A, B, and C should be 0:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"A: -2 + 8 + (-6) = 0\n\nB: -4 + 7 + (-3) = 0\n\nC: 12 + (-2) + (-10) = 0\n")),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null),(0,r.kt)("td",null,"A"),(0,r.kt)("td",null,"B"),(0,r.kt)("td",null,"C")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Try(txn_1)"),(0,r.kt)("td",null,"-2"),(0,r.kt)("td",null,"-4"),(0,r.kt)("td",null,"12")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Try(txn_2)"),(0,r.kt)("td",null,"8"),(0,r.kt)("td",null,"7"),(0,r.kt)("td",null,"-2")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Confirm(txn_2)"),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Try(txn_3)"),(0,r.kt)("td",null,"-6"),(0,r.kt)("td",null,"-3"),(0,r.kt)("td",null,"-10")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Confirm(txn_1)"),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,"Confirm(txn_3)"),(0,r.kt)("td",null),(0,r.kt)("td",null),(0,r.kt)("td",null))))}k.isMDXComponent=!0}}]);