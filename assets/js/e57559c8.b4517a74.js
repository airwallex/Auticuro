"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2930],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,c=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(t),d=a,f=p["".concat(l,".").concat(d)]||p[d]||y[d]||c;return t?r.createElement(f,o(o({ref:n},s),{},{components:t})):r.createElement(f,o({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var c=t.length,o=new Array(c);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<c;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const c={sidebar_position:2},o="Hierarchy Account Balance",i={unversionedId:"API Doc/Query APIs/HierarchyAccountBalance",id:"API Doc/Query APIs/HierarchyAccountBalance",title:"Hierarchy Account Balance",description:"HierarchyAccountBalance(seq_num String, root_only: bool)",source:"@site/docs/API Doc/Query APIs/HierarchyAccountBalance.md",sourceDirName:"API Doc/Query APIs",slug:"/API Doc/Query APIs/HierarchyAccountBalance",permalink:"/Auticuro/docs/API Doc/Query APIs/HierarchyAccountBalance",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Batch Account Balance",permalink:"/Auticuro/docs/API Doc/Query APIs/BatchAccountBalance"},next:{title:"Account History In Seq Range",permalink:"/Auticuro/docs/API Doc/Query APIs/AccountHistoryInSeqRange"}},l={},u=[{value:"Description",id:"description",level:3},{value:"Definitions",id:"definitions",level:3}],s={toc:u},p="wrapper";function y(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hierarchy-account-balance"},"Hierarchy Account Balance"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"HierarchyAccountBalance(seq_num: u64, hierarchy_account_id: String, root_only: bool)"))),(0,a.kt)("h3",{id:"description"},"Description"),(0,a.kt)("p",null,"Account hierarchy organizes the accounts with parent-children relationships that form a tree structure. While Firm\nWallet is only aware of and operates on leaf accounts, while non-leaf accounts provide an aggregated view of all its leaf\nchildren."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"HierarchyAccountBalance")," takes a ",(0,a.kt)("em",{parentName:"p"},"seq_num")," and ",(0,a.kt)("em",{parentName:"p"},"hierarchy_account_id")," and returns the accumulated balance\n(",(0,a.kt)("strong",{parentName:"p"},"available balance only"),") of the target account. If ",(0,a.kt)("em",{parentName:"p"},"root_only")," is set to true, only the balance of input hierarchy account\nis returned. Otherwise, balance of all accounts in the tree (with input account as root) are included."),(0,a.kt)("p",null,"For consistency, a non-zero ",(0,a.kt)("em",{parentName:"p"},"seq_num")," must be specified."),(0,a.kt)("h3",{id:"definitions"},"Definitions"),(0,a.kt)("p",null,"Hierarchy Account balance response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf3"},"message HierarchyAccountBalanceResponse {\n  option Error error = 1;\n  uint64 seq_num = 2;\n  string root_account_id = 3;\n  string root_account_balance = 4;\n  repeated HierarchyAccountBalance non_root_account_balances = 5;\n}\n\nmessage HierarchyAccountBalance {\n  string account_id = 1;\n  option string paret_account_id = 2;\n  string available_balance = 3;\n")))}y.isMDXComponent=!0}}]);